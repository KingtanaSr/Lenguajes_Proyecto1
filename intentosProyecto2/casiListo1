#lang racket
(require racket/trace)
(require rackunit)
(require rackunit/text-ui)



(define (es-variable? x)
  (cond
    [(symbol? x)
     (let ([str (symbol->string x)])
       (and (> (string-length str) 0)
            (char=? (string-ref str 0) #\?)))]
    [else #f]))

(define (es-átomo? x)
  (cond
    [(symbol? x)
     (let ([str (symbol->string x)])
       (and (> (string-length str) 0)
            (not (char=? (string-ref str 0) #\?))))]
    [else #f]))

(define (es-variable-interna? x)
  (and (symbol? x)
       (let ([str (symbol->string x)])
         (and (>= (string-length str) 2)
              (char=? (string-ref str 0) #\?)
              (char=? (string-ref str 1) #\_)))))

(define (es-regla? lista)
  (and (not (null? lista))
       (eq? (first lista) ':-)))

(define (es-hecho? lista)
  (let ((n (length lista)))
    (cond
      [(es-regla? lista) #f]
      [(or (= n 2) (= n 3)) #t]
      [else #f])))

(define (functor lista)
  (first lista))

(define (términos lista)
  (cdr lista))

(define(aridad lista)
  (length (cdr lista)))

(define (encabezado-regla lista)
  (second lista))

(define (condiciones-regla regla)
  (let ((conds (third regla))) ; tercer elemento, lista de condiciones anidadas
    (if (and (list? conds)
             (= (length conds) 1)
             (list? (first conds))) ; si es lista anidada de un solo elemento
        (first conds)            ; desanida
        conds)))                 ; sino retorna igual

(define (lista-variables-internas lista)
  (foldr (lambda (par acc)
           (let* ((a (car par))
                  (d (cdr par))
                  (acc1 (if (es-variable-interna? a) (cons a acc) acc))
                  (acc2 (if (es-variable-interna? d) (cons d acc1) acc1)))
             (remove-duplicates acc2)))
         '()
         lista))

(define (num-var-interna x)
  (let* ([str (if (symbol? x) (symbol->string x) x)])
    (string->number (substring str 2))))


(define (generar-variable-interna lista)
  (let* ([listav (lista-variables-internas lista)]
         [numeros (map num-var-interna listav)]
         [maximo (if (null? numeros) 0 (apply max numeros))]
         [nuevo-num (+ 1 maximo)]
         [nuevo-simbolo (string->symbol (string-append "?_" (number->string nuevo-num)))])
    nuevo-simbolo))

(define (asociar variable valor asociaciones)
  (if (not (es-variable? variable))
      asociaciones
      (let ((asoc-var (assoc variable asociaciones)))
        (cond
          ;; No hay asociación previa para variable
          [(not asoc-var)
           (if (es-variable? valor)
               (let ((vint (generar-variable-interna asociaciones)))
                 (append asociaciones
                         (list (cons variable vint)
                               (cons valor vint))))
               (append asociaciones (list (cons variable valor))))]

          ;; Ya hay asociación previa para variable
          [else
           (let ((val-asoc (cdr asoc-var)))
             (cond
               ;; Caso: ya está asociado al mismo valor
               [(equal? val-asoc valor) #t]

               ;; Caso conflicto átomos diferentes
               [(and (es-átomo? val-asoc) (es-átomo? valor) (not (equal? val-asoc valor)))
                #f]

               ;; Variable a variable, con asociación variable previa
               [(and (es-variable? val-asoc) (es-variable? valor))
                (let ((vint (generar-variable-interna asociaciones)))
                  (append asociaciones
                          (list (cons variable vint)
                                (cons valor vint)
                                (cons val-asoc vint))))]

               ;; Variable asociada a átomo, valor variable --> **CAMBIO AQUÍ**
               [(and (es-átomo? val-asoc) (es-variable? valor))
                (let ((vint (generar-variable-interna asociaciones)))
                  (append asociaciones
                          (list (cons variable vint)
                                (cons valor vint)
                                (cons vint val-asoc))))]

               ;; Variable asociada a variable, valor átomo
               [(and (es-variable? val-asoc) (es-átomo? valor))
                (if (assoc val-asoc asociaciones)
                    (let ((asoc-val (assoc val-asoc asociaciones)))
                      (if (equal? (cdr asoc-val) valor)
                          asociaciones
                          (append asociaciones (list (cons val-asoc valor)))))
                    (append asociaciones (list (cons val-asoc valor))))]

               ;; Cualquier otro caso inconsistente
               [else #f]))]))))

;; UNIFICACIÓN
(define (instanciar elemento asociaciones)
  (cond
    [(es-variable? elemento)
     (let ((asoc (assoc elemento asociaciones)))
       (if asoc (instanciar (cdr asoc) asociaciones) elemento))]
    [(list? elemento)
     (map (lambda (x) (instanciar x asociaciones)) elemento)]
    [else elemento]))


(define (unificar a b asociaciones)
  (let* ((a1 (instanciar a asociaciones))
         (b1 (instanciar b asociaciones)))
    (cond
      ;; Son iguales: si son átomos o estructuras iguales, no hacer nada
      [(equal? a1 b1)
       (if (es-variable-interna? a1)
           asociaciones
           (asociar a1 b1 asociaciones))]

      ;; a1 es variable
      [(es-variable? a1)
       (asociar a1 b1 asociaciones)]

      ;; b1 es variable
      [(es-variable? b1)
       (asociar b1 a1 asociaciones)]

      ;; listas iguales en longitud: intentar unificar sus elementos
      [(and (list? a1) (list? b1)
            (= (length a1) (length b1)))
       (unificar-listas a1 b1 asociaciones)]

      ;; cualquier otro caso: no unificable
      [else #f])))

(define (unificar-listas la lb asociaciones)
  (cond
    [(null? la) asociaciones]
    [(null? lb) asociaciones]
    [else
     (let ((res (unificar (first la) (first lb) asociaciones)))
       (if res
           (unificar-listas (rest la) (rest lb) res)
           #f))]))


;; RESOLUCIÓN (BUSCAR)
(define (resolver meta regla programa incognitas asociaciones)
  (cond
    [(es-hecho? regla)
     (let ((nueva (unificar meta regla asociaciones)))
       (if nueva
           (list (filtrar-asociaciones incognitas nueva))
           '()))]
    [(es-regla? regla)
     (let* ((regla-renombrada (renombrar-regla regla))
            (enc-ren (first regla-renombrada))
            (conds-ren (rest regla-renombrada))
            (nuevo-asoc (unificar meta enc-ren asociaciones)))
       (displayln "Encabezado renombrado:")
       (displayln enc-ren)
       (displayln "Condiciones renombradas:")
       (displayln conds-ren)
       (if nuevo-asoc
           (buscar-condiciones conds-ren programa incognitas nuevo-asoc)
           '()))]
    [else '()]))

(define (buscar meta programa incognitas asociaciones)
  (let ((resultados (map (lambda (regla-o-hecho)
                          (resolver meta regla-o-hecho programa incognitas asociaciones))
                        programa)))
    (if (null? resultados)
        '()
        (apply append resultados))))

(define (buscar-condiciones condiciones programa incognitas asociaciones)
  (if (null? condiciones)
      (list (filtrar-asociaciones incognitas asociaciones))
      (apply append
             (map (lambda (nuevo-asoc)
                    (buscar-condiciones (cdr condiciones) programa incognitas nuevo-asoc))
                  (buscar (car condiciones) programa incognitas asociaciones)))))

(define (filtrar-asociaciones incognitas asociaciones)
  (define (instanciar-profundo var)
    (let ((val (instanciar var asociaciones)))
      (if (equal? val var) val (instanciar-profundo val))))
  (map (lambda (v)
         (cons v (instanciar-profundo v)))
       incognitas))

(define (renombrar-regla regla)
  (define (renombrar-term term tabla)
    (cond
      [(es-variable? term)
       (let ((par (assoc term tabla)))
         (if par
             (values (cdr par) tabla)
             (let* ((nuevo (generar-variable-interna tabla))
                    (nueva-tabla (cons (cons term nuevo) tabla)))
               (values nuevo nueva-tabla))))]
      [(list? term)
       (let loop ((ts term) (res '()) (t tabla))
         (if (null? ts)
             (values (reverse res) t)
             (call-with-values
                 (lambda () (renombrar-term (car ts) t))
               (lambda (nuevo-term nuevo-tabla)
                 (loop (cdr ts) (cons nuevo-term res) nuevo-tabla)))))]
      [else (values term tabla)]))

  (let ((_ (first regla))
        (encabezado (second regla))
        (condiciones (third regla)))
    (call-with-values
      (lambda () (renombrar-term encabezado '()))
      (lambda (nuevo-enc tabla-final)
        (define (renombrar-condiciones conds tabla acc)
          (if (null? conds)
              (values (reverse acc) tabla)
              (call-with-values
                  (lambda () (renombrar-term (car conds) tabla))
                (lambda (nuevo-cond nueva-tabla)
                  (renombrar-condiciones (cdr conds) nueva-tabla (cons nuevo-cond acc))))))
        (call-with-values
            (lambda () (renombrar-condiciones condiciones tabla-final '()))
          (lambda (nuevas-condiciones _)
            (cons nuevo-enc nuevas-condiciones)))))))

;; INTÉRPRETE
(define (extraer-incognitas meta)
  (define (rec term acc)
    (cond
      [(es-variable? term)
       (if (member term acc) acc (cons term acc))]
      [(list? term)
       (foldr rec acc term)]
      [else acc]))
  (rec meta '()))

(define (flatten-once lst)
  (apply append lst))

(define (?- meta programa)
  (let* ((incognitas (extraer-incognitas meta))
         (soluciones (buscar meta programa incognitas '())))
    (if (null? soluciones)
        #f
        (flatten-once soluciones))))

;; PRUEBA
(define dbz
  '((igual ?x ?x)
    (padre bardock goku)
    (padre goku gohan)
    (padre goku goten)
    (padre bardock raditz)
    (padre vegeta trunks)
    (padre gohan pan)
    (madre chichi goten)
    (madre bulma trunks)
    (madre chichi gohan)
    (madre videl pan)
    (:- (progenitora ?x  ?y) ((padre ?x ?y)))
    (:- (progenitora ?x  ?y) ((madre ?x ?y)))
    (:- (ancestra ?x ?y) ((progenitora ?x ?y)))
    (:- (ancestra ?x ?y) ((ancestra ?x ?p) (progenitora ?p ?y)))
    )
  )
